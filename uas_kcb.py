# -*- coding: utf-8 -*-
"""uas_kcb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WrlVFWpDChkOdzF-vb84r6rNRZspZll5
"""

"""# Dataset Harga Motor"""

# Dataset harga motor
dataset = [
    {'tahun': 2019, 'kilometer': 238000, 'harga': 2450000},
    {'tahun': 2014, 'kilometer': 168000, 'harga': 2460000},
    {'tahun': 2017, 'kilometer': 65000, 'harga': 1110000},
    {'tahun': 2011, 'kilometer': 135000, 'harga': 2620000},
    {'tahun': 2013, 'kilometer': 148000, 'harga': 2260000},
    {'tahun': 2012, 'kilometer': 138000, 'harga': 1790000},
    {'tahun': 2018, 'kilometer': 225000, 'harga': 2540000},
    {'tahun': 2017, 'kilometer': 220000, 'harga': 2440000},
    {'tahun': 2021, 'kilometer': 270000, 'harga': 2360000},
    {'tahun': 2016, 'kilometer': 58000, 'harga': 800000},
    {'tahun': 2007, 'kilometer': 65000, 'harga': 1110000},
    {'tahun': 2019, 'kilometer': 240000, 'harga': 2440000},
    {'tahun': 2016, 'kilometer': 195000, 'harga': 2480000},
    {'tahun': 2018, 'kilometer': 78000, 'harga': 1250000},
    {'tahun': 2009, 'kilometer': 92000, 'harga': 1270000},
    {'tahun': 2018, 'kilometer': 235000, 'harga': 2440000},
    {'tahun': 2022, 'kilometer': 290000, 'harga': 2290000},
    {'tahun': 2015, 'kilometer': 188000, 'harga': 2490000},
    {'tahun': 2022, 'kilometer': 282000, 'harga': 2320000},
    {'tahun': 2016, 'kilometer': 198000, 'harga': 3480000},
    {'tahun': 2012, 'kilometer': 48000, 'harga': 210000},
    {'tahun': 2015, 'kilometer': 178000, 'harga': 2480000},
    {'tahun': 2012, 'kilometer': 145000, 'harga': 2040000},
    {'tahun': 2018, 'kilometer': 68000, 'harga': 1160000},
    {'tahun': 2006, 'kilometer': 52000, 'harga': 530000},
    {'tahun': 2020, 'kilometer': 263000, 'harga': 2380000},
    {'tahun': 2017, 'kilometer': 208000, 'harga': 2440000},
    {'tahun': 2014, 'kilometer': 173000, 'harga': 2470000},
    {'tahun': 2012, 'kilometer': 143000, 'harga': 1960000},
    {'tahun': 2020, 'kilometer': 260000, 'harga': 2390000},
    {'tahun': 2018, 'kilometer': 230000, 'harga': 2440000},
    {'tahun': 2013, 'kilometer': 158000, 'harga': 2440000},
    {'tahun': 2011, 'kilometer': 120000, 'harga': 1620000},
    {'tahun': 2021, 'kilometer': 275000, 'harga': 2340000},
    {'tahun': 2019, 'kilometer': 248000, 'harga': 2420000},
    {'tahun': 2016, 'kilometer': 203000, 'harga': 2480000},
    {'tahun': 2019, 'kilometer': 250000, 'harga': 2420000},
    {'tahun': 2008, 'kilometer': 88000, 'harga': 1280000},
    {'tahun': 2019, 'kilometer': 245000, 'harga': 3430000},
    {'tahun': 2006, 'kilometer': 55000, 'harga': 810000},
    {'tahun': 2015, 'kilometer': 180000, 'harga': 2480000},
    {'tahun': 2011, 'kilometer': 125000, 'harga': 1620000},
    {'tahun': 2020, 'kilometer': 255000, 'harga': 2400000},
    {'tahun': 2017, 'kilometer': 210000, 'harga': 2440000},
    {'tahun': 2012, 'kilometer': 140000, 'harga': 1850000},
    {'tahun': 2013, 'kilometer': 150000, 'harga': 2420000},
    {'tahun': 2022, 'kilometer': 288000, 'harga': 2290000},
    {'tahun': 2011, 'kilometer': 118000, 'harga': 1590000},
    {'tahun': 2019, 'kilometer': 233000, 'harga': 2460000},
    {'tahun': 2018, 'kilometer': 75000, 'harga': 1230000},
    {'tahun': 2005, 'kilometer': 28000, 'harga': 170000},
    {'tahun': 2014, 'kilometer': 165000, 'harga': 2450000},
    {'tahun': 2021, 'kilometer': 268000, 'harga': 2360000},
    {'tahun': 2016, 'kilometer': 205000, 'harga': 2480000},
    {'tahun': 2019, 'kilometer': 72000, 'harga': 1200000},
    {'tahun': 2007, 'kilometer': 72000, 'harga': 1200000},
    {'tahun': 2016, 'kilometer': 62000, 'harga': 1060000},
    {'tahun': 2011, 'kilometer': 128000, 'harga': 1620000},
    {'tahun': 2013, 'kilometer': 155000, 'harga': 2430000},
    {'tahun': 2008, 'kilometer': 85000, 'harga': 1560000},
    {'tahun': 2022, 'kilometer': 280000, 'harga': 2320000},
    {'tahun': 2015, 'kilometer': 188000, 'harga': 2490000},
    {'tahun': 2018, 'kilometer': 235000, 'harga': 2440000},
    {'tahun': 2009, 'kilometer': 95000, 'harga': 1290000},
    {'tahun': 2019, 'kilometer': 240000, 'harga': 2440000},
    {'tahun': 2014, 'kilometer': 168000, 'harga': 2460000},
    {'tahun': 2006, 'kilometer': 52000, 'harga': 530000},
    {'tahun': 2020, 'kilometer': 263000, 'harga': 2380000},
    {'tahun': 2017, 'kilometer': 208000, 'harga': 2440000},
    {'tahun': 2012, 'kilometer': 143000, 'harga': 1960000},
    {'tahun': 2020, 'kilometer': 260000, 'harga': 2390000},
    {'tahun': 2018, 'kilometer': 230000, 'harga': 2440000},
    {'tahun': 2013, 'kilometer': 158000, 'harga': 2640000},
    {'tahun': 2011, 'kilometer': 120000, 'harga': 1620000},
    {'tahun': 2021, 'kilometer': 275000, 'harga': 2340000},
    {'tahun': 2019, 'kilometer': 248000, 'harga': 2420000},
    {'tahun': 2016, 'kilometer': 203000, 'harga': 2480000},
    {'tahun': 2019, 'kilometer': 250000, 'harga': 2420000},
    {'tahun': 2008, 'kilometer': 88000, 'harga': 1280000},
    {'tahun': 2019, 'kilometer': 245000, 'harga': 2430000},
    {'tahun': 2006, 'kilometer': 55000, 'harga': 810000},
    {'tahun': 2015, 'kilometer': 180000, 'harga': 2480000},
    {'tahun': 2011, 'kilometer': 125000, 'harga': 1620000},
    {'tahun': 2020, 'kilometer': 255000, 'harga': 2400000},
    {'tahun': 2017, 'kilometer': 210000, 'harga': 2440000},
    {'tahun': 2012, 'kilometer': 140000, 'harga': 1850000},
    {'tahun': 2013, 'kilometer': 150000, 'harga': 2420000},
    {'tahun': 2022, 'kilometer': 288000, 'harga': 2690000},
    {'tahun': 2011, 'kilometer': 118000, 'harga': 1590000},
    {'tahun': 2019, 'kilometer': 233000, 'harga': 2460000},
    {'tahun': 2018, 'kilometer': 75000, 'harga': 1230000},
    {'tahun': 2005, 'kilometer': 28000, 'harga': 170000},
    {'tahun': 2014, 'kilometer': 165000, 'harga': 2750000},
    {'tahun': 2021, 'kilometer': 268000, 'harga': 2360000},
    {'tahun': 2016, 'kilometer': 205000, 'harga': 2480000},
    {'tahun': 2019, 'kilometer': 72000, 'harga': 1200000}
]

"""# Metode Fuzzy Mamdani"""

# mamdani fix
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import pandas as pd

# Definisikan variabel input
tahun = ctrl.Antecedent(np.arange(2005, 2024, 1), 'tahun')
kilometer = ctrl.Antecedent(np.arange(28000, 300001, 1000), 'kilometer')

# Definisikan variabel output
harga = ctrl.Consequent(np.arange(10000, 3000001, 10000), 'harga')

# Definisikan fungsi keanggotaan untuk variabel tahun
tahun['muda'] = fuzz.trimf(tahun.universe, [2005, 2005, 2010])
tahun['sedang'] = fuzz.trimf(tahun.universe, [2010, 2015, 2020])
tahun['tua'] = fuzz.trimf(tahun.universe, [2015, 2020, 2023])

# Definisikan fungsi keanggotaan untuk variabel kilometer
kilometer['sedikit'] = fuzz.trimf(kilometer.universe, [28000, 28000, 100000])
kilometer['sedang'] = fuzz.trimf(kilometer.universe, [50000, 100000, 150000])
kilometer['banyak'] = fuzz.trimf(kilometer.universe, [100000, 200000, 300000])

# Definisikan fungsi keanggotaan untuk variabel harga
harga['murah'] = fuzz.trimf(harga.universe, [10000, 10000, 500000])
harga['sedang'] = fuzz.trimf(harga.universe, [100000, 1500000, 2500000])
harga['mahal'] = fuzz.trimf(harga.universe, [1500000, 3000000, 3000000])

# Aturan fuzzy
rule1 = ctrl.Rule(tahun['muda'] & kilometer['sedikit'], harga['murah'])
rule2 = ctrl.Rule(tahun['muda'] & kilometer['sedang'], harga['sedang'])
rule3 = ctrl.Rule(tahun['muda'] & kilometer['banyak'], harga['mahal'])
rule4 = ctrl.Rule(tahun['sedang'] & kilometer['sedikit'], harga['murah'])
rule5 = ctrl.Rule(tahun['sedang'] & kilometer['sedang'], harga['sedang'])
rule6 = ctrl.Rule(tahun['sedang'] & kilometer['banyak'], harga['mahal'])
rule7 = ctrl.Rule(tahun['tua'] & kilometer['sedikit'], harga['murah'])
rule8 = ctrl.Rule(tahun['tua'] & kilometer['sedang'], harga['sedang'])
rule9 = ctrl.Rule(tahun['tua'] & kilometer['banyak'], harga['mahal'])

# Membangun sistem kontrol fuzzy
harga_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9])
harga_prediksi = ctrl.ControlSystemSimulation(harga_ctrl)



# Daftar untuk tabel output
output_table = []

# Nilai minimal error untuk menentukan prediksi benar
minimal_error = 100000

jumlah_benar = 0;
jumlah_data = 0;
# Mencetak prediksi harga fuzzy untuk setiap data motor dalam dataset
for data in dataset:
    tahun_prediksi = data['tahun']
    kilometer_prediksi = data['kilometer']
    harga_asli = data['harga']

    # Mengatur input untuk sistem kontrol fuzzy
    harga_prediksi.input['tahun'] = tahun_prediksi
    harga_prediksi.input['kilometer'] = kilometer_prediksi

    # Melakukan perhitungan sistem kontrol fuzzy
    harga_prediksi.compute()

    # Mendapatkan nilai harga prediksi
    harga_fuzzy = harga_prediksi.output['harga']

    error = abs(harga_asli - harga_fuzzy)
    prediksi_benar = 'Benar' if harga_asli == harga_fuzzy else 'Salah'
    prediksi_benar = 'Benar' if error <= minimal_error else 'Salah'
    if error <= minimal_error:
      jumlah_benar += 1

    output_table.append([tahun_prediksi, kilometer_prediksi, harga_asli, round(harga_fuzzy, -4), error, prediksi_benar])
    print(f"Data Tahun: {tahun_prediksi}, Kilometer: {kilometer_prediksi}, Harga Asli: {harga_asli}, Harga Fuzzy: {harga_fuzzy:.2f}, Error: {error:.4f}, Prediksi: {prediksi_benar}")
    jumlah_data += 1

# Menampilkan Akurasi
print()
print("Akurasi : ", (jumlah_benar/jumlah_data)*100, " %")
# # Membuat DataFrame dari tabel output
# df = pd.DataFrame(output_table, columns=['Tahun', 'Kilometer', 'Harga Asli', 'Harga Fuzzy', 'Error', 'Prediksi'])

# pd.set_option('display.max_rows', None)
# pd.set_option('display.max_columns', None)

# print(df['Harga Fuzzy'].to_string(index=False))

# Menampilkan tabel output
# print(df)

"""# Metode Fuzzy Tsukamoto"""

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import pandas as pd

# Definisikan variabel input
tahun = ctrl.Antecedent(np.arange(2005, 2024, 1), 'tahun')
kilometer = ctrl.Antecedent(np.arange(28000, 300001, 1000), 'kilometer')

# Definisikan variabel output
harga = ctrl.Consequent(np.arange(10000, 3000001, 10000), 'harga')

# Definisikan fungsi keanggotaan untuk variabel tahun
tahun['muda'] = fuzz.trimf(tahun.universe, [2005, 2005, 2010])
tahun['sedang'] = fuzz.trimf(tahun.universe, [2010, 2015, 2020])
tahun['tua'] = fuzz.trimf(tahun.universe, [2015, 2020, 2023])

# Definisikan fungsi keanggotaan untuk variabel kilometer
kilometer['sedikit'] = fuzz.trimf(kilometer.universe, [28000, 28000, 100000])
kilometer['sedang'] = fuzz.trimf(kilometer.universe, [50000, 100000, 150000])
kilometer['banyak'] = fuzz.trimf(kilometer.universe, [100000, 200000, 300000])

# Definisikan fungsi keanggotaan untuk variabel harga
harga['murah'] = fuzz.trimf(harga.universe, [10000, 10000, 500000])
harga['sedang'] = fuzz.trimf(harga.universe, [100000, 1500000, 2500000])
harga['mahal'] = fuzz.trimf(harga.universe, [1500000, 3000000, 3000000])

# Membangun aturan fuzzy
rule1 = ctrl.Rule(tahun['muda'] & kilometer['sedikit'], harga['murah'])
rule2 = ctrl.Rule(tahun['muda'] & kilometer['sedang'], harga['sedang'])
rule3 = ctrl.Rule(tahun['muda'] & kilometer['banyak'], harga['mahal'])
rule4 = ctrl.Rule(tahun['sedang'] & kilometer['sedikit'], harga['murah'])
rule5 = ctrl.Rule(tahun['sedang'] & kilometer['sedang'], harga['sedang'])
rule6 = ctrl.Rule(tahun['sedang'] & kilometer['banyak'], harga['mahal'])
rule7 = ctrl.Rule(tahun['tua'] & kilometer['sedikit'], harga['murah'])
rule8 = ctrl.Rule(tahun['tua'] & kilometer['sedang'], harga['sedang'])
rule9 = ctrl.Rule(tahun['tua'] & kilometer['banyak'], harga['mahal'])

# Membangun sistem kontrol fuzzy
harga_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9])
harga_prediksi = ctrl.ControlSystemSimulation(harga_ctrl)

# Daftar untuk tabel output
output_table = []

# Nilai minimal error untuk menentukan prediksi benar
minimal_error = 100000

jumlah_benar = 0;
jumlah_data = 0;
# Mencetak prediksi harga fuzzy untuk setiap data motor dalam dataset
for data in dataset:
    tahun_prediksi = data['tahun']
    kilometer_prediksi = data['kilometer']
    harga_asli = data['harga']

    # Mengatur input untuk sistem kontrol fuzzy
    harga_prediksi.input['tahun'] = tahun_prediksi
    harga_prediksi.input['kilometer'] = kilometer_prediksi

    # Melakukan perhitungan sistem kontrol fuzzy
    harga_prediksi.compute()

    # Mendapatkan nilai harga prediksi
    harga_fuzzy = harga_prediksi.output['harga']

    error = abs(harga_asli - harga_fuzzy)
    # prediksi_benar = 'Benar' if harga_asli == round(harga_fuzzy, -4) else 'Salah'
    prediksi_benar = 'Benar' if error <= minimal_error else 'Salah'
    if error <= minimal_error:
      jumlah_benar += 1

    print(f"Data Tahun: {tahun_prediksi}, Kilometer: {kilometer_prediksi}, Harga Asli: {harga_asli}, Harga Fuzzy: {harga_fuzzy:.2f}, Error: {error:.4f}, Prediksi: {prediksi_benar}")
    output_table.append([tahun_prediksi, kilometer_prediksi, harga_asli, round(harga_fuzzy, -4), error, prediksi_benar])
    jumlah_data += 1

# Hitung dan menampilkan akurasi
print()
print("Akurasi : ", (jumlah_benar/jumlah_data)*100, " %")

# # Membuat DataFrame dari tabel output
# df = pd.DataFrame(output_table, columns=['Tahun', 'Kilometer', 'Harga Asli', 'Harga Fuzzy', 'Error', 'Prediksi'])

# # Menampilkan tabel output
# print(df)